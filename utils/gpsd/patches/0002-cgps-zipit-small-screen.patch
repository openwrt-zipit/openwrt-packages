--- gpsd-3.15/cgps.c.bak	2016-10-01 13:02:40.128081830 -0400
+++ gpsd-3.15/cgps.c	2016-10-01 14:54:15.833562567 -0400
@@ -47,21 +47,26 @@
 
 /* This is how far over in the 'datawin' window to indent the field
    descriptions. */
-#define DATAWIN_DESC_OFFSET 5
+#define DATAWIN_DESC_OFFSET 1
 
 /* This is how far over in the 'datawin' window to indent the field
    values. */
-#define DATAWIN_VALUE_OFFSET 17
+#define DATAWIN_VALUE_OFFSET 12
 
 /* This is the width of the 'datawin' window.  It's recommended to
    keep DATAWIN_WIDTH + SATELLITES_WIDTH <= 80 so it'll fit on a
    "standard" 80x24 screen. */
-#define DATAWIN_WIDTH 45
+#define DATAWIN_WIDTH 33
 
 /* This is the width of the 'satellites' window.  It's recommended to
    keep DATAWIN_WIDTH + SATELLITES_WIDTH <= 80 so it'll fit on a
    "standard" 80x24 screen. */
-#define SATELLITES_WIDTH 35
+#define SATELLITES_WIDTH 20
+
+//#define DW 27
+#define DW 17
+//#define DX 22
+#define DX 12
 
 /* ================================================================
    You shouldn't have to modify any #define values below this line.
@@ -321,7 +326,8 @@
 	}
 
 	(void)wborder(datawin, 0, 0, 0, 0, 0, 0, 0, 0);
-	(void)mvwprintw(satellites, 1, 1, "PRN:   Elev:  Azim:  SNR:  Used:");
+        //(void)mvwprintw(satellites, 1, 1, "PRN:   Elev:  Azim:  SNR:  Used:");
+        (void)mvwprintw(satellites, 1, 1, "PRN Elv Azm SNR OK");
 	(void)wborder(satellites, 0, 0, 0, 0, 0, 0, 0, 0);
     }
 }
@@ -347,38 +353,38 @@
 	(void)unix_to_iso8601(gpsdata->fix.time, scr, sizeof(scr));
     } else
 	(void)snprintf(scr, sizeof(scr), "n/a");
-    (void)mvwprintw(datawin, 1, DATAWIN_VALUE_OFFSET, "%-*s", 27, scr);
+    (void)mvwprintw(datawin, 1, DATAWIN_VALUE_OFFSET-4, "%-*s", DW, scr);
 
     /* Fill in the heading. */
     if (isnan(gpsdata->fix.track) == 0) {
 	(void)snprintf(scr, sizeof(scr), "%.1f degrees", gpsdata->fix.track);
     } else
 	(void)snprintf(scr, sizeof(scr), "n/a");
-    (void)mvwprintw(datawin, 2, DATAWIN_VALUE_OFFSET, "%-*s", 27, scr);
+    (void)mvwprintw(datawin, 2, DATAWIN_VALUE_OFFSET, "%-*s", DW, scr);
 
     /* Fill in the pitch. */
     if (isnan(gpsdata->fix.climb) == 0) {
 	(void)snprintf(scr, sizeof(scr), "%.1f", gpsdata->fix.climb);
     } else
 	(void)snprintf(scr, sizeof(scr), "n/a");
-    (void)mvwprintw(datawin, 3, DATAWIN_VALUE_OFFSET, "%-*s", 27, scr);
+    (void)mvwprintw(datawin, 3, DATAWIN_VALUE_OFFSET, "%-*s", DW, scr);
 
     /* Fill in the roll. */
     if (isnan(gpsdata->fix.speed) == 0)
 	(void)snprintf(scr, sizeof(scr), "%.1f", gpsdata->fix.speed);
     else
 	(void)snprintf(scr, sizeof(scr), "n/a");
-    (void)mvwprintw(datawin, 4, DATAWIN_VALUE_OFFSET, "%-*s", 27, scr);
+    (void)mvwprintw(datawin, 4, DATAWIN_VALUE_OFFSET, "%-*s", DW, scr);
 
     /* Fill in the speed. */
     if (isnan(gpsdata->fix.altitude) == 0)
 	(void)snprintf(scr, sizeof(scr), "%.1f", gpsdata->fix.altitude);
     else
 	(void)snprintf(scr, sizeof(scr), "n/a");
-    (void)mvwprintw(datawin, 5, DATAWIN_VALUE_OFFSET, "%-*s", 27, scr);
+    (void)mvwprintw(datawin, 5, DATAWIN_VALUE_OFFSET, "%-*s", DW, scr);
 
     /* When we need to fill in receiver type again, do it here. */
-    (void)mvwprintw(datawin, 6, DATAWIN_VALUE_OFFSET, "%-*s", 27, scr);
+    (void)mvwprintw(datawin, 6, DATAWIN_VALUE_OFFSET, "%-*s", DW, scr);
 
     /* Be quiet if the user requests silence. */
     if (!silent_flag && raw_flag) {
@@ -408,7 +414,8 @@
 	    for (i = 0; i < MAX_POSSIBLE_SATS; i++) {
 		if (i < gpsdata->satellites_visible) {
 		    (void)snprintf(scr, sizeof(scr),
-				   " %3d    %02d    %03d    %02d      %c",
+				   //" %3d    %02d    %03d    %02d      %c",
+                                   "%3d  %02d %03d  %02d  %c",
 				   gpsdata->skyview[i].PRN,
 				   gpsdata->skyview[i].elevation,
 				   gpsdata->skyview[i].azimuth,
@@ -428,7 +435,8 @@
 			&& (gpsdata->skyview[i].used
 			    || (gpsdata->satellites_visible <= display_sats))) {
 			(void)snprintf(scr, sizeof(scr),
-				       " %3d    %02d    %03d    %02d      %c",
+				       //" %3d    %02d    %03d    %02d      %c",
+                                       "%3d  %02d %03d  %02d  %c",
 				       gpsdata->skyview[i].PRN,
 				       gpsdata->skyview[i].elevation,
 				       gpsdata->skyview[i].azimuth,
@@ -456,7 +464,7 @@
 	(void)unix_to_iso8601(gpsdata->fix.time, scr, sizeof(scr));
     } else
 	(void)snprintf(scr, sizeof(scr), "n/a");
-    (void)mvwprintw(datawin, 1, DATAWIN_VALUE_OFFSET, "%-*s", 27, scr);
+    (void)mvwprintw(datawin, 1, DATAWIN_VALUE_OFFSET-4, "%-*s", DW, scr);
 
 
     /* Fill in the latitude. */
@@ -466,7 +474,7 @@
 		       (gpsdata->fix.latitude < 0) ? 'S' : 'N');
     } else
 	(void)snprintf(scr, sizeof(scr), "n/a");
-    (void)mvwprintw(datawin, 2, DATAWIN_VALUE_OFFSET, "%-*s", 27, scr);
+    (void)mvwprintw(datawin, 2, DATAWIN_VALUE_OFFSET, "%-*s", DW, scr);
 
     /* Fill in the longitude. */
     if (gpsdata->fix.mode >= MODE_2D && isnan(gpsdata->fix.longitude) == 0) {
@@ -475,7 +483,7 @@
 		       (gpsdata->fix.longitude < 0) ? 'W' : 'E');
     } else
 	(void)snprintf(scr, sizeof(scr), "n/a");
-    (void)mvwprintw(datawin, 3, DATAWIN_VALUE_OFFSET, "%-*s", 27, scr);
+    (void)mvwprintw(datawin, 3, DATAWIN_VALUE_OFFSET, "%-*s", DW, scr);
 
     /* Fill in the altitude. */
     if (gpsdata->fix.mode >= MODE_3D && isnan(gpsdata->fix.altitude) == 0)
@@ -483,7 +491,7 @@
 		       gpsdata->fix.altitude * altfactor, altunits);
     else
 	(void)snprintf(scr, sizeof(scr), "n/a");
-    (void)mvwprintw(datawin, 4, DATAWIN_VALUE_OFFSET, "%-*s", 27, scr);
+    (void)mvwprintw(datawin, 4, DATAWIN_VALUE_OFFSET, "%-*s", DW, scr);
 
     /* Fill in the speed. */
     if (gpsdata->fix.mode >= MODE_2D && isnan(gpsdata->fix.track) == 0)
@@ -491,7 +499,7 @@
 		       gpsdata->fix.speed * speedfactor, speedunits);
     else
 	(void)snprintf(scr, sizeof(scr), "n/a");
-    (void)mvwprintw(datawin, 5, DATAWIN_VALUE_OFFSET, "%-*s", 27, scr);
+    (void)mvwprintw(datawin, 5, DATAWIN_VALUE_OFFSET, "%-*s", DW, scr);
 
     /* Fill in the heading. */
     if (gpsdata->fix.mode >= MODE_2D && isnan(gpsdata->fix.track) == 0) {
@@ -507,7 +515,7 @@
 	}
     } else
 	(void)snprintf(scr, sizeof(scr), "n/a");
-    (void)mvwprintw(datawin, 6, DATAWIN_VALUE_OFFSET, "%-*s", 27, scr);
+    (void)mvwprintw(datawin, 6, DATAWIN_VALUE_OFFSET, "%-*s", DW, scr);
 
     /* Fill in the rate of climb. */
     if (gpsdata->fix.mode >= MODE_3D && isnan(gpsdata->fix.climb) == 0)
@@ -515,7 +523,7 @@
 		       gpsdata->fix.climb * altfactor * 60, altunits);
     else
 	(void)snprintf(scr, sizeof(scr), "n/a");
-    (void)mvwprintw(datawin, 7, DATAWIN_VALUE_OFFSET, "%-*s", 27, scr);
+    (void)mvwprintw(datawin, 7, DATAWIN_VALUE_OFFSET, "%-*s", DW, scr);
 
     /* Fill in the GPS status and the time since the last state
      * change. */
@@ -542,7 +550,7 @@
 	    break;
 	}
     }
-    (void)mvwprintw(datawin, 8, DATAWIN_VALUE_OFFSET, "%-*s", 27, scr);
+    (void)mvwprintw(datawin, 8, DATAWIN_VALUE_OFFSET, "%-*s", DW, scr);
 
     /* Note that the following fields are exceptions to the
      * sizing rule.  The minimum window size does not include these
@@ -560,7 +568,7 @@
 			   (int)(gpsdata->fix.epx * altfactor), altunits);
 	else
 	    (void)snprintf(scr, sizeof(scr), "n/a");
-	(void)mvwprintw(datawin, 9, DATAWIN_VALUE_OFFSET + 5, "%-*s", 22,
+	(void)mvwprintw(datawin, 9, DATAWIN_VALUE_OFFSET + 5, "%-*s", DX,
 			scr);
 
 	if (isnan(gpsdata->fix.epy) == 0)
@@ -568,7 +576,7 @@
 			   (int)(gpsdata->fix.epy * altfactor), altunits);
 	else
 	    (void)snprintf(scr, sizeof(scr), "n/a");
-	(void)mvwprintw(datawin, 10, DATAWIN_VALUE_OFFSET + 5, "%-*s", 22,
+	(void)mvwprintw(datawin, 10, DATAWIN_VALUE_OFFSET + 5, "%-*s", DX,
 			scr);
 
 	/* Fill in the estimated vertical position error. */
@@ -577,7 +585,7 @@
 			   (int)(gpsdata->fix.epv * altfactor), altunits);
 	else
 	    (void)snprintf(scr, sizeof(scr), "n/a");
-	(void)mvwprintw(datawin, 11, DATAWIN_VALUE_OFFSET + 5, "%-*s", 22,
+	(void)mvwprintw(datawin, 11, DATAWIN_VALUE_OFFSET + 5, "%-*s", DX,
 			scr);
 
 	/* Fill in the estimated track error. */
@@ -586,7 +594,7 @@
 			   (int)(gpsdata->fix.epd));
 	else
 	    (void)snprintf(scr, sizeof(scr), "n/a");
-	(void)mvwprintw(datawin, 12, DATAWIN_VALUE_OFFSET + 5, "%-*s", 22,
+	(void)mvwprintw(datawin, 12, DATAWIN_VALUE_OFFSET + 5, "%-*s", DX,
 			scr);
 
 	/* Fill in the estimated speed error. */
@@ -595,7 +603,7 @@
 			   (int)(gpsdata->fix.eps * speedfactor), speedunits);
 	else
 	    (void)snprintf(scr, sizeof(scr), "n/a");
-	(void)mvwprintw(datawin, 13, DATAWIN_VALUE_OFFSET + 5, "%-*s", 22,
+	(void)mvwprintw(datawin, 13, DATAWIN_VALUE_OFFSET + 5, "%-*s", DX,
 			scr);
 	/* Fill in the time offset. */
 	if (isnan(gpsdata->fix.time) == 0)
@@ -603,14 +611,14 @@
 			   (double)(timestamp()-gpsdata->fix.time));
 	else
 	    (void)snprintf(scr, sizeof(scr), "n/a");
-	(void)mvwprintw(datawin, 14, DATAWIN_VALUE_OFFSET + 5, "%-*s", 22,
+	(void)mvwprintw(datawin, 14, DATAWIN_VALUE_OFFSET + 5, "%-*s", DX,
 			scr);
 	/* Fill in the grid square (esr thought *this* one was interesting). */
 	if (isnan(gpsdata->fix.longitude)==0 && isnan(gpsdata->fix.latitude)==0)
 	    s = maidenhead(gpsdata->fix.latitude,gpsdata->fix.longitude);
 	else
 	    s = "n/a";
-	(void)mvwprintw(datawin, 15, DATAWIN_VALUE_OFFSET + 5, "%-*s", 22, s);
+	(void)mvwprintw(datawin, 15, DATAWIN_VALUE_OFFSET + 5, "%-*s", DX, s);
     }
 
     /* Be quiet if the user requests silence. */
